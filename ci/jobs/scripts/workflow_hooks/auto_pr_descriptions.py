import os
import re
import sys
from praktika.info import Info
from praktika.utils import Shell
from ci.praktika.gh import GH
from praktika import Secret
from typing import Tuple
from pathlib import Path

def extract_autogenerated_content(filename: str) -> str:
    """Read a file and return its contents."""
    try:
        with open(filename, 'r') as f:
            file_content = f.read()
        
        # Remove "EOF < /dev/null" if it exists
        file_content = file_content.replace("EOF < /dev/null", "")
        
        return file_content
    except FileNotFoundError:
        print(f"Warning: {filename} not found")
        return ""
    except Exception as e:
        print(f"Error reading {filename}: {e}")
        return ""

def ensure_claude_API_key(info: Info) -> bool:
    try:
        api_key = Secret.Config(
            "ANTHROPIC_API_KEY", type=Secret.Type.GH_SECRET
        ).get_value()
        if not api_key:
            print("Error: ANTHROPIC_API_KEY secret not configured")
            return False

        print("ANTHROPIC_API_KEY secret found")
        os.environ["ANTHROPIC_API_KEY"] = api_key
        print("ANTHROPIC_API_KEY secret found and set as environment variable")
        return True
    except Exception as e:
        print(f"Error: Could not access ANTHROPIC_API_KEY secret: {e}")
        return False

def ensure_claude_code_cli() -> bool:
    try:
        Shell.check("command -v claude")
        print("claude-code CLI already available")
        return True
    except:
        print("claude-code not found, installing...")
        try:
            Shell.check("npm install -g @anthropic-ai/claude-code", verbose=True)
            print("claude-code CLI installed successfully")
            return True
        except:
            print("Error: Could not install claude-code CLI")
            return False

def generate_description(pr_diff: str, model: str) -> str:
    try:
        prompt = f"Use the pr-description-generator agent to generate a PR description for this PR with the following diff: \n\n {pr_diff}"
        command = f"claude --allowedTools Bash --model '{model}' -p '{prompt}'"
        Shell.check(command)
        description = extract_autogenerated_content("pr_description.txt")
        return description
    except Exception as e:
        print(f"Error running claude command: {e}")
        return f"Error generating PR description: {e}"

def generate_changelog_entry(pr_diff: str, model:str) -> str:
    try:
        prompt = f"Use the pr-changelog-generator agent to generate a PR changelog entry for this PR with the following diff: \n\n {pr_diff}"
        command = f"claude --allowedTools Bash --model '{model}' -p '{prompt}'"
        Shell.check(command)
        changelog = extract_autogenerated_content("changelog_entry.txt")
        return changelog
    except Exception as e:
        print(f"Error running claude command: {e}")
        return f"Error generating changelog entry: {e}"

if __name__ == "__main__":
    info = Info()
    if not ensure_claude_code_cli() or not ensure_claude_API_key(info):
        sys.exit(1)

    model = "claude-3-5-haiku-20241022"

    pr_diff = GH.get_pr_diff()
    description = generate_description(pr_diff, model) 
    changelog = generate_changelog_entry(pr_diff, model)
    print(description)
    print("--------------")
    print(changelog)
    # Post the description and changelog entry as a suggestion in the comments in posthook
    
