import os
import re
import sys
from praktika.info import Info
from praktika.utils import Shell
from praktika import Secret
from typing import Tuple
from pathlib import Path

def extract_autogenerated_content(filename: str) -> str:
    """Read a file and return its contents."""
    try:
        with open(filename, 'r') as f:
            file_content = f.read()
        
        # Remove "EOF < /dev/null" if it exists
        file_content = file_content.replace("EOF < /dev/null", "")
        
        return file_content
    except FileNotFoundError:
        print(f"Warning: {filename} not found")
        return ""
    except Exception as e:
        print(f"Error reading {filename}: {e}")
        return ""

def ensure_claude_API_key(info: Info) -> bool:
    try:
        api_key = Secret.Config(
            "ANTHROPIC_API_KEY", type=Secret.Type.AWS_SSM_SECRET
        ).get_value()
        if not api_key:
            print("Error: ANTHROPIC_API_KEY secret not configured")
            return False

        print("ANTHROPIC_API_KEY secret found")
        os.environ["ANTHROPIC_API_KEY"] = api_key
        print("ANTHROPIC_API_KEY secret found and set as environment variable")
        return True
    except Exception as e:
        print(f"Error: Could not access ANTHROPIC_API_KEY secret: {e}")
        return False

def ensure_claude_code_cli() -> bool:
    try:
        Shell.check("command -v claude")
        print("claude-code CLI already available")
        return True
    except:
        print("claude-code not found, installing...")
        try:
            Shell.check("npm install -g @anthropic-ai/claude-code", verbose=True)
            print("claude-code CLI installed successfully")
            return True
        except:
            print("Error: Could not install claude-code CLI")
            return False

def generate_description(pr_number: int) -> str:
    try:
        model = "claude-3-5-haiku-20241022"
        prompt = f"Use the pr-description-generator agent to generate a PR description for PR {pr_number}."
        command = f"claude --allowedTools Bash --model '{model}' -p '{prompt}'"
        Shell.check(command)
        description = f"<!--AUTOGENERATED:begin-->\n{extract_autogenerated_content("pr_description.txt")}\n<!--AUTOGENERATED:end-->"
        return description
    except Exception as e:
        print(f"Error running claude command: {e}")
        return f"Error generating description: {e}"

def generate_changelog(pr_number: int) -> str:
    try:
        model = "claude-3-5-haiku-20241022"
        prompt = f"Use the pr-changelog-generator agent to generate a PR changelog entry for PR {pr_number}."
        command = f"claude --allowedTools Bash --model '{model}' -p '{prompt}'"
        Shell.check(command)
        changelog = f"<!--AUTOGENERATED:begin-->\n{extract_autogenerated_content("changelog_entry.txt")}\n<!--AUTOGENERATED:end-->"
        return changelog
    except Exception as e:
        print(f"Error running claude command: {e}")
        return f"Error generating description: {e}"

def check_body_commands(pr_body: str) -> Tuple[bool, bool]:
    lines = list(map(lambda x: x.strip(), pr_body.split("\n") if pr_body else []))
    lines = [re.sub(r"\s+", " ", line) for line in lines]

    contains_auto_description = False
    contains_auto_changelog = False
    for line in lines:
        if re.search(r"ci:auto-description", line):
            contains_auto_description = True
        if re.search(r"ci:auto-changelog", line):
            contains_auto_changelog = True
    return (contains_auto_description, contains_auto_changelog)

if __name__ == "__main__":
    info = Info()
    if not ensure_claude_code_cli() or not ensure_claude_API_key(info):
        sys.exit(1)

    description_required_body, changelog_required_body = check_body_commands(info.pr_body)
    if description_required_body:
        description = generate_description(info.pr_number)
    if changelog_required_body:
        changelog = generate_changelog(info.pr_number)
